name: Build and Push Docker Image to ECR

on: [workflow_dispatch, push]

env:
  ECR_REPO_NAME: easyfundraising
  TERRAFORM_VERSION: 1.7.3
  MAJOR_VERSION: v1.0


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - uses: aws-actions/amazon-ecr-login@v1
      id: login-ecr

    # - name: Get Latest Version
    #   id: get-latest-version
    #   run: |
    #     latest_version=$(aws ecr describe-images --repository-name ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME --query 'images[0].imageTag' --output text || echo '0.0.0')
    #     echo "::set-output name=VERSION::$latest_version"

    - name: Get Latest Version
      id: get-latest-version
      run: |
        latest_version=$(aws ecr describe-images --repository-name ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME --query 'images|sort_by(@, &imagePushedAt)|[-1].imageTags[0]' --output text || echo '0.0.0')
        echo "::set-output name=VERSION::$latest_version"

    - name: Increment Version
      id: increment-version
      run: |
        current_version="${{ steps.get-latest-version.outputs.VERSION }}"
        IFS='.' read -r major minor patch <<< "$current_version"
        incremented_version="v1.$((patch+1))"
        echo "::set-output name=INCREMENTED_VERSION::$incremented_version"

    - name: Publish new image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        INCREMENTED_VERSION="${{ steps.increment-version.outputs.INCREMENTED_VERSION }}"
        docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:$INCREMENTED_VERSION ./Task1
        docker push $ECR_REGISTRY/$ECR_REPO_NAME:$INCREMENTED_VERSION

    # - name: Get Latest Version
    #   id: get-latest-version
    #   run: echo "::set-output name=VERSION::$(aws ecr describe-images --repository-name ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME --query 'images[0].imageTag' --output text || echo '0.0.0')"

    # - name: Increment Version
    #   id: increment-version
    #   run: |
    #     INCREMENTED_VERSION="v1.$(echo "0.0.0" | awk -F '.' '{print $2 "." $3+1}')"
    #     echo "::set-output name=INCREMENTED_VERSION::$INCREMENTED_VERSION"

    # - name: Publish new image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #   run: |
    #     INCREMENTED_VERSION="${{ steps.increment-version.outputs.INCREMENTED_VERSION }}"
    #     docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:$INCREMENTED_VERSION ./Task1
    #     docker push $ECR_REGISTRY/$ECR_REPO_NAME:$INCREMENTED_VERSION
    # - name: Publish new image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #   run: |
    #     TAG=${GITHUB_SHA:0:10}
    #     docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:v1.0.0 ./Task1
    #     docker push $ECR_REGISTRY/$ECR_REPO_NAME:v1.0.0

  Tf-plan-and-apply:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd Task1/Terraform
          terraform init
      
      - name: Terraform Plan
        run: |
          cd Task1/Terraform
          terraform plan -out=tfplan
      
      - name: Terraform Apply
        run: |
          cd Task1/Terraform
          terraform apply -auto-approve tfplan

